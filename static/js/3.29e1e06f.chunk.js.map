{"version":3,"sources":["components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/ProfileInfo/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/Profileinfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","Post","props","className","s","item","src","message","likes","maxLength10","maxLengthCreator","AddNewPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","MyPosts","React","memo","postsElements","posts","map","p","likesCount","postsBlock","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Component","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","ProfileInfo","profile","desctiptionBlock","photos","large","Preloader","Profile","ProfileContainer","userId","this","match","params","getUserProfile","getStatus","compose","authorizedUserId","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.29e1e06f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1zW2K\",\"posts\":\"MyPosts_posts__1bbqL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2TKIy\",\"likes\":\"Post_likes__16Vdt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bigImg\":\"ProfileInfo_bigImg__3k5eN\",\"desctiptionBlock\":\"ProfileInfo_desctiptionBlock__13LCT\"};","import s from './Post.module.css';\r\nimport React from 'react'\r\n\r\nconst Post = (props) => {\r\n\treturn (\r\n\t\t<div className={s.item}>\r\n\t\t\t<img src='https://cdn.mos.cms.futurecdn.net/bQgcMwEnyhFu6ASuUFrtsn-1200-80.jpg'></img>\r\n\t\t\t{props.message}\r\n\t\t\t<span className={s.likes}>Likes: {props.likes}</span>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Post;","\r\nimport React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { maxLengthCreator, required } from '../../../utils/validators/validators';\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst AddNewPostForm = (props) => {\r\n\treturn (\r\n\t\t<form onSubmit={props.handleSubmit}>\r\n\t\t\t<div>\r\n\t\t\t\t{/* <Field component=\"textarea\" */}\r\n\t\t\t\t<Field component={Textarea}  //*Из обычной txtA сделали свою\r\n\t\t\t\t\tname=\"newPostText\" placeholder=\"Enter your post\"\r\n\t\t\t\t\tvalidate={[required, maxLength10]} />\r\n\t\t\t</div>\r\n\t\t\t<div><button>Add Post</button></div>\r\n\t\t</form>\r\n\r\n\t)\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm({ form: \"ProfileAddNewPostForm\" })(AddNewPostForm)\r\n\r\nconst MyPosts = React.memo(props => {\r\n\tlet postsElements = props.posts.map(p => <Post message={p.message} likesCount={p.likesCount} />)\r\n\r\n\tlet newPostElement = React.createRef();\r\n\t// let onAddPost = () => {props.addPost();}\r\n\t// let onPostChange = () => {\r\n\t// \tlet text = newPostElement.current.value;\r\n\t// \tprops.updateNewPostText(text)\r\n\t// }\r\n\tlet onAddPost = (values) => {\r\n\t\tprops.addPost(values.newPostText)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={s.postsBlock}>\r\n\t\t\t<h2>My posts are bellow</h2>\r\n\t\t\t<div>\r\n\t\t\t\t<AddNewPostFormRedux onSubmit={onAddPost} />\r\n\t\t\t</div>\r\n\t\t\t<div className={s.posts}>\r\n\t\t\t\t{postsElements}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n})\r\n\r\n\r\nexport default MyPosts;\r\n\r\n\r\n\r\n{/* <div>\r\n<textarea ref={newPostElement}\r\n\tvalue={props.newPostText} //прокидываем введенные Данные в state (FLUX)\r\n\tonChange={onPostChange} />\r\n</div>\r\n<div>\r\n<button onClick={onAddPost}>Add post</button>\r\n</div> */}\r\n\r\n{/*const MyPosts = (props) => {\r\n\tlet postsElements = props.posts.map(p => <Post message={p.message} likes={p.likesCount} />)\r\n\r\n\tlet newPostElement = React.createRef();\r\n\r\n\tlet onAddPost = () => {\r\n\t\tprops.addPost();\r\n\t}\r\n\tlet onPostChange = () => {\r\n\t\tlet text = newPostElement.current.value;\r\n\t\tprops.updateNewPostText(text)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={s.postsBlock}>\r\n\t\t\t<h2>My posts are bellow</h2>\r\n\t\t\t<div>\r\n\r\n\r\n\t\t\t</div>\r\n\t\t\t<div className={s.posts}>\r\n\t\t\t\t{postsElements}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}*/}\r\n","\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addPostActionCreator, updateNewPostTextActionCreator } from '../../../redux/profile-reducer';\r\n\r\nimport MyPosts from './MyPosts';// const MyPostsContainer = (props) => {\r\n\r\nconst mapStateToProps = (state) => { //данные, которые берем из State\r\n\treturn {\r\n\t\tposts: state.profilePage.posts,\r\n\t\tnewPostText: state.profilePage.newPostText,\r\n\t}\r\n}\r\nconst mapDispatchToProps = (dispatch) => {  //коллбэки, которые будем отправлять в презентационную компоненту\r\n\treturn {\r\n\t\t// updateNewPostText: (text) => {\r\n\t\t// \tlet action = updateNewPostTextActionCreator(text);\r\n\t\t// \tdispatch(action);\r\n\t\t// },\r\n\t\taddPost: (newPostText) => {\r\n\t\t\tdispatch(addPostActionCreator(newPostText));//создали экшн\r\n\r\n\t\t}\r\n\t}\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;","\r\nimport React from 'react'\r\n\r\nclass ProfileStatus extends React.Component {\r\n\tstate = {\r\n\t\teditMode: false,\r\n\t\tstatus: this.props.status\r\n\t}\r\n\r\n\tactivateEditMode = () => {\r\n\t\tthis.setState({\r\n\t\t\teditMode: true\r\n\t\t})\r\n\t}\r\n\tdeactivateEditMode = () => {\r\n\t\tthis.setState({\r\n\t\t\teditMode: false\r\n\t\t})\r\n\t\tthis.props.updateStatus(this.state.status)\r\n\t}\r\n\tonStatusChange = (e) => {\r\n\t\tthis.setState({\r\n\t\t\tstatus: e.currentTarget.value\r\n\t\t});\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps, prevState) {\r\n\t\tif (prevProps.status !== this.props.status) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tstatus: this.props.status\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{!this.state.editMode &&\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<span onDoubleClick={this.activateEditMode}>{this.props.status || \"------\"}</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t}\r\n\t\t\t\t{this.state.editMode &&\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<input onChange={this.onStatusChange} autoFocus={true}\r\n\t\t\t\t\t\t\tonBlur={this.deactivateEditMode.bind(this)} value={this.state.status} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t}\r\n\t\t\t</div >\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default ProfileStatus;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","\r\nimport React, { useEffect, useState } from 'react'\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\tlet [editMode, setEditMode] = useState(false);\r\n\tlet [status, setStatus] = useState(props.status);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetStatus(props.status);\r\n\t}, [props.status]); //*при изменении статуса перерисовываем\r\n\r\n\tconst activateEditMode = () => { setEditMode(true) }\r\n\tconst deactivateEditMode = () => {\r\n\t\tsetEditMode(false);\r\n\t\tprops.updateStatus(status);\r\n\t}\r\n\tconst onStatusChange = (e) => {\r\n\t\tsetStatus(e.currentTarget.value);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{ !editMode &&\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<span onDoubleClick={activateEditMode}>{props.status || \"------\"}</span>\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t\t{editMode &&\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<input onChange={onStatusChange} onBlur={deactivateEditMode}\r\n\t\t\t\t\t\tvalue={status} autoFocus={true} />\r\n\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t</div >\r\n\t);\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import s from './ProfileInfo.module.css';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport ProfileStatus from './ProfileStatus'\r\nimport React from 'react'\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\n\r\nconst ProfileInfo = (props) => {\r\n\tif (!props.profile) {\r\n\t\treturn <Preloader />\r\n\t}\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{/* <div>\r\n\t\t\t\t<img className={s.bigImg}\r\n\t\t\t\t\tsrc='https://media-cdn.tripadvisor.com/media/photo-s/19/e0/c6/ae/ideal-prime-beach.jpg'></img>\r\n\t\t\t</div> */}\r\n\t\t\t<div className={s.desctiptionBlock}>\r\n\t\t\t\t<img src={props.profile.photos.large} />\r\n\t\t\t\t{/* <div><span>({props.profile.contacts})</span></div> */}\r\n\t\t\t\t<ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus} />\r\n\t\t\t\tava + descriptionnn\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default ProfileInfo;","import MyPosts from './MyPosts/MyPosts';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport ProfileInfo from './ProfileInfo/Profileinfo';\r\nimport React from 'react'\r\n\r\n\r\nconst Profile = (props) => {\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus} />\r\n\r\n\t\t\t<div>\r\n\t\t\t\t<MyPostsContainer\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Profile from './Profile';\r\nimport { getUserProfile, getStatus, updateStatus } from '../../redux/profile-reducer'\r\nimport { withRouter } from 'react-router-dom';\r\n// import { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from 'redux';\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n\tcomponentDidMount() {\r\n\t\tlet userId = this.props.match.params.userId;\r\n\t\t// if (!userId) {     \t\t\t\t\t//!! authorization\r\n\t\t// \tuserId = this.props.authorizedUserId\r\n\t\t// if (!userId) {\r\n\t\t// \tthis.props.history.push(\"/login\")\r\n\t\t// }\r\n\t\t// }\r\n\r\n\t\tthis.props.getUserProfile(userId);\r\n\t\tthis.props.getStatus(userId);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Profile {...this.props}\r\n\t\t\t\tprofile={this.props.profile}\r\n\t\t\t\tstatus={this.props.status}\r\n\t\t\t\tupdateStatus={this.props.updateStatus} />\r\n\t\t)\r\n\t}\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n\tprofile: state.profilePage.profile,\r\n\tstatus: state.profilePage.status,\r\n\tauthorizedUserId: state.auth.userId,\r\n\tisAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose(\r\n\tconnect(mapStateToProps, { getUserProfile, getStatus, updateStatus }),\r\n\twithRouter,\r\n\t// withAuthRedirect  //!! не нужно уже тут\r\n)(ProfileContainer)"],"sourceRoot":""}